// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

model Product {
  id        Int       @unique @default(autoincrement())
  name      String    @unique @db.VarChar()
  price     Int
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt()

  @@map("products")
}

model User {
  id         Int       @id @default(autoincrement())
  username   String    @unique @db.VarChar()
  email      String?   @unique
  password   String
  otp        String? // Optional OTP field
  profilePic String? // Optional profile picture field
  name       String?
  role       Role      @default(USER) // Role field with default value USER
  createdAt  DateTime  @default(now())
  updatedAt  DateTime? @updatedAt()
  isVerified Boolean   @default(false)
  verCode    String    @default("")

  userGigs UserGig[]

  @@map("users")
}

model Gig {
  id        Int       @id @default(autoincrement())
  name      String
  price     String?
  difficult String
  desc      String
  category  String?
  image     String? // Optional profile picture field
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt()

  userGigs UserGig[]

  @@map("gigs")
}

model UserGig {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt()

  userId Int
  user   User @relation(fields: [userId], references: [id])

  gigId Int
  gig   Gig @relation(fields: [gigId], references: [id])

  @@unique([userId, gigId])
  @@map("user_gigs")
}
